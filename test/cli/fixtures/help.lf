Usage: peggy [options] [input_file...]

Arguments:
  input_file                       Grammar file(s) to read.  Use "-" to read
                                   stdin.  If multiple files are given, they
                                   are combined in the given order to produce a
                                   single output.  Use
                                   npm:"<packageName>/file.peggy" to import
                                   from an npm dependency. (default: ["-"])

Options:
  -v, --version                    output the version number
  --allowed-start-rules <rules>    Comma-separated list of rules the generated
                                   parser will be allowed to start parsing
                                   from.  Use '*' if you want any rule to be
                                   allowed as a start rule.  (Can be specified
                                   multiple times) (default: the first rule in
                                   the grammar)
  --ast                            Output a grammar AST instead of a parser
                                   code (default: false)
  --cache                          Make generated parser cache results
                                   (default: false)
  -d, --dependency <dependency>    Comma-separated list of dependencies, either
                                   as a module name, or as `variable:module`.
                                   (Can be specified multiple times)
  -D, --dependencies <json>        Dependencies, in JSON object format with
                                   variable:module pairs. (Can be specified
                                   multiple times).
  --dts                            Create a .d.ts to describe the generated
                                   parser.
  -e, --export-var <variable>      Name of a global variable into which the
                                   parser object is assigned to when no module
                                   loader is detected.
  --extra-options <options>        Additional options (in JSON format as an
                                   object) to pass to peggy.generate
  -c, --extra-options-file <file>  File with additional options (in JSON as an
                                   object or commonjs module format) to pass to
                                   peggy.generate
  --format <format>                Format of the generated parser (choices:
                                   "bare", "commonjs", "es", "globals",
                                   default: "commonjs")
  -o, --output <file>              Output file for generated parser. Use '-'
                                   for stdout (the default is a file next to
                                   the input file with the extension change to
                                   '.js', unless a test is specified, in which
                                   case no parser is output without this
                                   option)
  --plugin <module>                Comma-separated list of plugins. (can be
                                   specified multiple times)
  -m, --source-map [mapfile]       Generate a source map. If name is not
                                   specified, the source map will be named
                                   "<input_file>.map" if input is a file and
                                   "source.map" if input is a standard input.
                                   If the special filename `inline` is given,
                                   the sourcemap will be embedded in the output
                                   file as a data URI.  If the filename is
                                   prefixed with `hidden:`, no mapping URL will
                                   be included so that the mapping can be
                                   specified with an HTTP SourceMap: header.
                                   This option conflicts with the `-t/--test`
                                   and `-T/--test-file` options unless
                                   `-o/--output` is also specified
  --return-types <typeInfo>        Types returned for rules, as JSON object of
                                   the form {"ruleName": "type"}
  -S, --start-rule <rule>          When testing, use the given rule as the
                                   start rule.  If this rule is not in the
                                   allowed start rules, it will be added.
  -t, --test <text>                Test the parser with the given text,
                                   outputting the result of running the parser
                                   instead of the parser itself. If the input
                                   to be tested is not parsed, the CLI will
                                   exit with code 2
  -T, --test-file <filename>       Test the parser with the contents of the
                                   given file, outputting the result of running
                                   the parser instead of the parser itself. If
                                   the input to be tested is not parsed, the
                                   CLI will exit with code 2. A filename of '-'
                                   will read from stdin.
  --trace                          Enable tracing in generated parser (default:
                                   false)
  -w,--watch                       Watch the input file for changes, generating
                                   the output once at the start, and again
                                   whenever the file changes.
  -h, --help                       display help for command
